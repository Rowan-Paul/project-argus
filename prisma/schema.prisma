generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map("compound_id")
  userId             Int       @map("user_id")
  providerType       String    @map("provider_type")
  providerId         String    @map("provider_id")
  providerAccountId  String    @map("provider_account_id")
  refreshToken       String?   @map("refresh_token")
  accessToken        String?   @map("access_token")
  accessTokenExpires DateTime? @map("access_token_expires")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @default(now()) @map("updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  expires      DateTime
  sessionToken String   @unique @map("session_token")
  accessToken  String   @unique @map("access_token")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")

  @@map("sessions")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?   @unique
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @map("updated_at")
  history       history[] @relation("historyTousers")

  @@map("users")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")

  @@map("verification_requests")
}

model movies {
  id       Int       @unique @default(autoincrement())
  title    String    @db.VarChar
  year     Int       @default(dbgenerated("date_part('year'::text, CURRENT_DATE)"))
  overview String    @db.VarChar
  tmdb_id  Int?      @unique
  history  history[]

  @@unique([title, year], name: "movies_title.year_unique")
}

model history {
  id         Int       @unique @default(autoincrement())
  datetime   DateTime? @db.Timestamptz(6)
  user_id    Int
  movie_id   Int?
  episode_id Int?
  episodes   episodes? @relation(fields: [episode_id], references: [id])
  movies     movies?   @relation(fields: [movie_id], references: [id])
  users      User      @relation("historyTousers", fields: [user_id], references: [id])
}

model shows {
  id       Int       @unique @default(autoincrement())
  name     String    @db.VarChar
  overview String    @db.VarChar
  tmdb_id  Int?      @unique
  year     Int       @default(dbgenerated("date_part('year'::text, CURRENT_DATE)"))
  seasons  seasons[]

  @@unique([name, year], name: "shows.name.year_unique")
}

model seasons {
  id            Int        @unique @default(autoincrement())
  show_id       Int
  name          String     @db.VarChar
  overview      String     @db.VarChar
  season_number Int
  episode_count Int
  air_date      DateTime   @db.Timestamp(6)
  tmdb_id       Int?       @unique
  shows         shows      @relation(fields: [show_id], references: [id])
  episodes      episodes[]

  @@unique([show_id, name], name: "seasons.show_id_name_unique")
  @@unique([show_id, season_number], name: "seasons.show_id_season_number_unique")
}

model episodes {
  id             Int       @unique @default(autoincrement())
  name           String    @db.VarChar
  overview       String    @db.VarChar
  season_id      Int
  tmdb_id        Int?
  air_date       DateTime  @db.Timestamp(6)
  episode_number Int
  seasons        seasons   @relation(fields: [season_id], references: [id])
  history        history[]
}
